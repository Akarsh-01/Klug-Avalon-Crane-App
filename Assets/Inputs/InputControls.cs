//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""Controls"",
            ""id"": ""8d277602-6884-4578-80d8-341e4f5cf0b2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""aabb33a3-afe2-4270-bb64-e74517d0efbd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""e9de0b26-cdd1-45b4-a1c0-6ef842c2ea45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b38b5e22-ebe6-42f5-8905-b97193056ebd"",
                    ""path"": ""<XRController>{LeftHand}/{Primary2DAxis}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""fd595743-0ebc-4f73-af7d-dd3650bee924"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f3f2bae5-f833-4c78-bcee-7a4d8a4dfd23"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f91b9a20-d601-4168-9299-4b8a2ceefe9e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bda7fda2-aa5e-41f1-8c53-9842b9372eb9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8b23e027-bb5b-4dd5-9bc0-a9c27cd4cdff"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Forklift"",
            ""id"": ""2b5ff0d4-c2f6-4ce9-b24e-836b294b6e7b"",
            ""actions"": [
                {
                    ""name"": ""ForkMove"",
                    ""type"": ""Value"",
                    ""id"": ""6d06b0f6-e120-4134-a45d-b1812258682c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ForkEnter"",
                    ""type"": ""Button"",
                    ""id"": ""299bb4de-cd13-45c2-b8b7-ffad4e31a9d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d6a0b579-69fc-4dc0-a8cf-f96e4b0935ec"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d3cfb738-f8a5-4412-9135-b4926ce087b1"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""eae76d54-4137-4a24-93a0-d16e1f4feb82"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XR"",
                    ""id"": ""dd62233b-11ad-435b-81c9-b26db8b42303"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""f917eca9-098f-43bc-86b7-36d180c4f282"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""df9068c2-24ab-4dfe-8fc9-dce2fac330c0"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""eff443bb-e023-47b2-be70-71bfa15d4ccb"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f56daf1f-c655-40b2-946b-a37941e11216"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForkEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Knuckleboom"",
            ""id"": ""30e016a1-9b1c-481b-a36a-03c86d896b5c"",
            ""actions"": [
                {
                    ""name"": ""KnuckleMove"",
                    ""type"": ""Value"",
                    ""id"": ""c1921668-5bc4-4cf0-822d-d7cfda422f66"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Knuckle"",
                    ""type"": ""Button"",
                    ""id"": ""6890d6c6-9281-4945-8c8e-6544a36971ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stabilize"",
                    ""type"": ""Button"",
                    ""id"": ""50394d8b-2d94-4d44-83b7-c85661748e6f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""e92de82e-0fe7-42bc-992f-a3d59825c72c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KnuckleMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ccf59da9-0bd2-47ed-9d8e-0f72942f6314"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KnuckleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f2c91e9c-5c90-43fa-97bc-b31ad33dea29"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KnuckleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XR"",
                    ""id"": ""41228160-0e5d-4405-903e-f8b2953f69ce"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KnuckleMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""a88a0555-72ba-40ee-bd7f-3e55fc24165e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KnuckleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bdd4de70-1707-42bd-9cab-013f2aad3e92"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KnuckleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5c8808fe-6dc3-42b7-a7e9-4420bcd331de"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Knuckle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f74fa90e-beb4-4565-a5dc-1e332b778a2f"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stabilize"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EOT"",
            ""id"": ""03222d2a-52f5-4a11-a24f-33cbaee6563a"",
            ""actions"": [
                {
                    ""name"": ""EOTMove"",
                    ""type"": ""Value"",
                    ""id"": ""15bbf7e4-b6f4-4491-a34d-5dd7738fe429"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Adjustment"",
                    ""type"": ""Button"",
                    ""id"": ""da00188a-c9b3-42be-9f4b-dd0801febe36"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""0a850ef0-13ea-47db-bd12-ecfa2b7c6fe6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EOTEnter"",
                    ""type"": ""Button"",
                    ""id"": ""0570cf14-dc46-4408-8a2a-8227c8ea3227"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""5fad6854-0a1a-4ce3-b981-0fc4234bcb2b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EOTMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1b3c4edb-bca9-4e44-aa91-c463a54363de"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EOTMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""45cdd1dd-b02c-4e14-ae56-ff0e37ed1d39"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EOTMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""XR"",
                    ""id"": ""d4d76d12-75cd-45c3-820b-7efd5d78f152"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EOTMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d659651b-a51b-4410-8711-277de3004ee8"",
                    ""path"": ""<XRController>{LeftHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EOTMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1ae720c7-e19c-4b81-8bb7-66cad981c859"",
                    ""path"": ""<XRController>{RightHand}/{Trigger}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EOTMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""06a57a42-e402-4a34-a42b-f994ccb34360"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Adjustment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e41026b8-f018-4383-a537-0befebd46002"",
                    ""path"": ""<XRController>{RightHand}/{PrimaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Adjustment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b8c5272-b728-404e-8940-2414abbaa513"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e176ed54-45e2-4a7e-8c9a-682affcba7b3"",
                    ""path"": ""<XRController>{RightHand}/{SecondaryButton}"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d7bd664-46be-4066-a918-b289a1f32840"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EOTEnter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Controls
        m_Controls = asset.FindActionMap("Controls", throwIfNotFound: true);
        m_Controls_Movement = m_Controls.FindAction("Movement", throwIfNotFound: true);
        m_Controls_Newaction = m_Controls.FindAction("New action", throwIfNotFound: true);
        // Forklift
        m_Forklift = asset.FindActionMap("Forklift", throwIfNotFound: true);
        m_Forklift_ForkMove = m_Forklift.FindAction("ForkMove", throwIfNotFound: true);
        m_Forklift_ForkEnter = m_Forklift.FindAction("ForkEnter", throwIfNotFound: true);
        // Knuckleboom
        m_Knuckleboom = asset.FindActionMap("Knuckleboom", throwIfNotFound: true);
        m_Knuckleboom_KnuckleMove = m_Knuckleboom.FindAction("KnuckleMove", throwIfNotFound: true);
        m_Knuckleboom_Knuckle = m_Knuckleboom.FindAction("Knuckle", throwIfNotFound: true);
        m_Knuckleboom_Stabilize = m_Knuckleboom.FindAction("Stabilize", throwIfNotFound: true);
        // EOT
        m_EOT = asset.FindActionMap("EOT", throwIfNotFound: true);
        m_EOT_EOTMove = m_EOT.FindAction("EOTMove", throwIfNotFound: true);
        m_EOT_Adjustment = m_EOT.FindAction("Adjustment", throwIfNotFound: true);
        m_EOT_Grab = m_EOT.FindAction("Grab", throwIfNotFound: true);
        m_EOT_EOTEnter = m_EOT.FindAction("EOTEnter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Controls
    private readonly InputActionMap m_Controls;
    private List<IControlsActions> m_ControlsActionsCallbackInterfaces = new List<IControlsActions>();
    private readonly InputAction m_Controls_Movement;
    private readonly InputAction m_Controls_Newaction;
    public struct ControlsActions
    {
        private @InputControls m_Wrapper;
        public ControlsActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Controls_Movement;
        public InputAction @Newaction => m_Wrapper.m_Controls_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Controls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControlsActions set) { return set.Get(); }
        public void AddCallbacks(IControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_ControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IControlsActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IControlsActions instance)
        {
            if (m_Wrapper.m_ControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_ControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControlsActions @Controls => new ControlsActions(this);

    // Forklift
    private readonly InputActionMap m_Forklift;
    private List<IForkliftActions> m_ForkliftActionsCallbackInterfaces = new List<IForkliftActions>();
    private readonly InputAction m_Forklift_ForkMove;
    private readonly InputAction m_Forklift_ForkEnter;
    public struct ForkliftActions
    {
        private @InputControls m_Wrapper;
        public ForkliftActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ForkMove => m_Wrapper.m_Forklift_ForkMove;
        public InputAction @ForkEnter => m_Wrapper.m_Forklift_ForkEnter;
        public InputActionMap Get() { return m_Wrapper.m_Forklift; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ForkliftActions set) { return set.Get(); }
        public void AddCallbacks(IForkliftActions instance)
        {
            if (instance == null || m_Wrapper.m_ForkliftActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ForkliftActionsCallbackInterfaces.Add(instance);
            @ForkMove.started += instance.OnForkMove;
            @ForkMove.performed += instance.OnForkMove;
            @ForkMove.canceled += instance.OnForkMove;
            @ForkEnter.started += instance.OnForkEnter;
            @ForkEnter.performed += instance.OnForkEnter;
            @ForkEnter.canceled += instance.OnForkEnter;
        }

        private void UnregisterCallbacks(IForkliftActions instance)
        {
            @ForkMove.started -= instance.OnForkMove;
            @ForkMove.performed -= instance.OnForkMove;
            @ForkMove.canceled -= instance.OnForkMove;
            @ForkEnter.started -= instance.OnForkEnter;
            @ForkEnter.performed -= instance.OnForkEnter;
            @ForkEnter.canceled -= instance.OnForkEnter;
        }

        public void RemoveCallbacks(IForkliftActions instance)
        {
            if (m_Wrapper.m_ForkliftActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IForkliftActions instance)
        {
            foreach (var item in m_Wrapper.m_ForkliftActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ForkliftActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ForkliftActions @Forklift => new ForkliftActions(this);

    // Knuckleboom
    private readonly InputActionMap m_Knuckleboom;
    private List<IKnuckleboomActions> m_KnuckleboomActionsCallbackInterfaces = new List<IKnuckleboomActions>();
    private readonly InputAction m_Knuckleboom_KnuckleMove;
    private readonly InputAction m_Knuckleboom_Knuckle;
    private readonly InputAction m_Knuckleboom_Stabilize;
    public struct KnuckleboomActions
    {
        private @InputControls m_Wrapper;
        public KnuckleboomActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @KnuckleMove => m_Wrapper.m_Knuckleboom_KnuckleMove;
        public InputAction @Knuckle => m_Wrapper.m_Knuckleboom_Knuckle;
        public InputAction @Stabilize => m_Wrapper.m_Knuckleboom_Stabilize;
        public InputActionMap Get() { return m_Wrapper.m_Knuckleboom; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KnuckleboomActions set) { return set.Get(); }
        public void AddCallbacks(IKnuckleboomActions instance)
        {
            if (instance == null || m_Wrapper.m_KnuckleboomActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KnuckleboomActionsCallbackInterfaces.Add(instance);
            @KnuckleMove.started += instance.OnKnuckleMove;
            @KnuckleMove.performed += instance.OnKnuckleMove;
            @KnuckleMove.canceled += instance.OnKnuckleMove;
            @Knuckle.started += instance.OnKnuckle;
            @Knuckle.performed += instance.OnKnuckle;
            @Knuckle.canceled += instance.OnKnuckle;
            @Stabilize.started += instance.OnStabilize;
            @Stabilize.performed += instance.OnStabilize;
            @Stabilize.canceled += instance.OnStabilize;
        }

        private void UnregisterCallbacks(IKnuckleboomActions instance)
        {
            @KnuckleMove.started -= instance.OnKnuckleMove;
            @KnuckleMove.performed -= instance.OnKnuckleMove;
            @KnuckleMove.canceled -= instance.OnKnuckleMove;
            @Knuckle.started -= instance.OnKnuckle;
            @Knuckle.performed -= instance.OnKnuckle;
            @Knuckle.canceled -= instance.OnKnuckle;
            @Stabilize.started -= instance.OnStabilize;
            @Stabilize.performed -= instance.OnStabilize;
            @Stabilize.canceled -= instance.OnStabilize;
        }

        public void RemoveCallbacks(IKnuckleboomActions instance)
        {
            if (m_Wrapper.m_KnuckleboomActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKnuckleboomActions instance)
        {
            foreach (var item in m_Wrapper.m_KnuckleboomActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KnuckleboomActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KnuckleboomActions @Knuckleboom => new KnuckleboomActions(this);

    // EOT
    private readonly InputActionMap m_EOT;
    private List<IEOTActions> m_EOTActionsCallbackInterfaces = new List<IEOTActions>();
    private readonly InputAction m_EOT_EOTMove;
    private readonly InputAction m_EOT_Adjustment;
    private readonly InputAction m_EOT_Grab;
    private readonly InputAction m_EOT_EOTEnter;
    public struct EOTActions
    {
        private @InputControls m_Wrapper;
        public EOTActions(@InputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EOTMove => m_Wrapper.m_EOT_EOTMove;
        public InputAction @Adjustment => m_Wrapper.m_EOT_Adjustment;
        public InputAction @Grab => m_Wrapper.m_EOT_Grab;
        public InputAction @EOTEnter => m_Wrapper.m_EOT_EOTEnter;
        public InputActionMap Get() { return m_Wrapper.m_EOT; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EOTActions set) { return set.Get(); }
        public void AddCallbacks(IEOTActions instance)
        {
            if (instance == null || m_Wrapper.m_EOTActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EOTActionsCallbackInterfaces.Add(instance);
            @EOTMove.started += instance.OnEOTMove;
            @EOTMove.performed += instance.OnEOTMove;
            @EOTMove.canceled += instance.OnEOTMove;
            @Adjustment.started += instance.OnAdjustment;
            @Adjustment.performed += instance.OnAdjustment;
            @Adjustment.canceled += instance.OnAdjustment;
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @EOTEnter.started += instance.OnEOTEnter;
            @EOTEnter.performed += instance.OnEOTEnter;
            @EOTEnter.canceled += instance.OnEOTEnter;
        }

        private void UnregisterCallbacks(IEOTActions instance)
        {
            @EOTMove.started -= instance.OnEOTMove;
            @EOTMove.performed -= instance.OnEOTMove;
            @EOTMove.canceled -= instance.OnEOTMove;
            @Adjustment.started -= instance.OnAdjustment;
            @Adjustment.performed -= instance.OnAdjustment;
            @Adjustment.canceled -= instance.OnAdjustment;
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @EOTEnter.started -= instance.OnEOTEnter;
            @EOTEnter.performed -= instance.OnEOTEnter;
            @EOTEnter.canceled -= instance.OnEOTEnter;
        }

        public void RemoveCallbacks(IEOTActions instance)
        {
            if (m_Wrapper.m_EOTActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEOTActions instance)
        {
            foreach (var item in m_Wrapper.m_EOTActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EOTActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EOTActions @EOT => new EOTActions(this);
    public interface IControlsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IForkliftActions
    {
        void OnForkMove(InputAction.CallbackContext context);
        void OnForkEnter(InputAction.CallbackContext context);
    }
    public interface IKnuckleboomActions
    {
        void OnKnuckleMove(InputAction.CallbackContext context);
        void OnKnuckle(InputAction.CallbackContext context);
        void OnStabilize(InputAction.CallbackContext context);
    }
    public interface IEOTActions
    {
        void OnEOTMove(InputAction.CallbackContext context);
        void OnAdjustment(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnEOTEnter(InputAction.CallbackContext context);
    }
}
